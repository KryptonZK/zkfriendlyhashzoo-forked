use super::rescue_prime_params::RescuePrimeParams;

use crate::fields::field64::Fp64;

use ff::from_hex;
use lazy_static::lazy_static;
use std::sync::Arc;

type Scalar = Fp64;

lazy_static! {
    pub static ref MDS2: Vec<Vec<Scalar>> = vec![
        vec![
            from_hex("0xffffffffffffffc3").unwrap(),
            from_hex("0x0000000000000003").unwrap(),
        ],
        vec![
            from_hex("0xffffffffffffffbf").unwrap(),
            from_hex("0x0000000000000007").unwrap(),
        ],
    ];
    pub static ref MDS3: Vec<Vec<Scalar>> = vec![
        vec![
            from_hex("0x0000000000000008").unwrap(),
            from_hex("0xffffffffffffffb7").unwrap(),
            from_hex("0x0000000000000007").unwrap(),
        ],
        vec![
            from_hex("0x0000000000000038").unwrap(),
            from_hex("0xffffffffffffff6b").unwrap(),
            from_hex("0x0000000000000023").unwrap(),
        ],
        vec![
            from_hex("0x0000000000000118").unwrap(),
            from_hex("0xfffffffffffffe13").unwrap(),
            from_hex("0x000000000000009b").unwrap(),
        ],
    ];
    pub static ref RC_EASY1: Vec<Vec<Scalar>> = vec![
        vec![
            from_hex("0x84ed89ef58ea85f6").unwrap(),
            from_hex("0x6445f469b0c60e48").unwrap(),
            from_hex("0x5feebcf620670329").unwrap(),
        ],
        vec![
            from_hex("0x197c83c5a650ff7f").unwrap(),
            from_hex("0xd03c47450ecc2c8d").unwrap(),
            from_hex("0x15e3e44b3edfb4d3").unwrap(),
        ],
        vec![
            from_hex("0x6e40a4c272145b7a").unwrap(),
            from_hex("0x9d764479eed78273").unwrap(),
            from_hex("0xc968f498ba55833a").unwrap(),
        ],
        vec![
            from_hex("0xc2b55011a016e09c").unwrap(),
            from_hex("0x84aa602c2613bcd4").unwrap(),
            from_hex("0x1565b62686ac979c").unwrap(),
        ],
        vec![
            from_hex("0xa9ea4e3e9228f8fd").unwrap(),
            from_hex("0x81351e88a528ccb3").unwrap(),
            from_hex("0xe100321d935a283e").unwrap(),
        ],
        vec![
            from_hex("0x7746f4a3be3a4ea7").unwrap(),
            from_hex("0x4d49397001675f90").unwrap(),
            from_hex("0x5a216614d9035429").unwrap(),
        ],
        vec![
            from_hex("0x03e5d1b3e71aecfc").unwrap(),
            from_hex("0x54ac7f3f5f5d24e8").unwrap(),
            from_hex("0x2506ef1199fffe63").unwrap(),
        ],
        vec![
            from_hex("0x95a210cb53ffbf22").unwrap(),
            from_hex("0xc940fed88817101c").unwrap(),
            from_hex("0xa7d2a2b29183b542").unwrap(),
        ],
    ];
    pub static ref RC_EASY2: Vec<Vec<Scalar>> = vec![
        vec![
            from_hex("0xe99efb4501735177").unwrap(),
            from_hex("0xf8fb92a1e2696cf7").unwrap(),
        ],
        vec![
            from_hex("0xf599b466d1b6ab6d").unwrap(),
            from_hex("0xf8728548533d0edb").unwrap(),
        ],
        vec![
            from_hex("0x609b9177f613e709").unwrap(),
            from_hex("0x5b69f866c8c98807").unwrap(),
        ],
        vec![
            from_hex("0x74fe196576c2b28c").unwrap(),
            from_hex("0xca26ef9fdc6adba6").unwrap(),
        ],
        vec![
            from_hex("0xf9ff62881da82d65").unwrap(),
            from_hex("0xc8f322715916db90").unwrap(),
        ],
        vec![
            from_hex("0x046b1e95e6213637").unwrap(),
            from_hex("0xcf8d73c55b061b75").unwrap(),
        ],
        vec![
            from_hex("0x59fa9c17e66b184a").unwrap(),
            from_hex("0xdaf0a48359d97e3b").unwrap(),
        ],
        vec![
            from_hex("0x8b12c8b7f70556f3").unwrap(),
            from_hex("0x29595af168b0ffb1").unwrap(),
        ],
        vec![
            from_hex("0xe20719536a330f06").unwrap(),
            from_hex("0x4ac039cf359ec6f1").unwrap(),
        ],
        vec![
            from_hex("0xdf7c6766ac017295").unwrap(),
            from_hex("0x32aa4f18ea71c95b").unwrap(),
        ],
        vec![
            from_hex("0xa9dad5e36ebe1994").unwrap(),
            from_hex("0xcf5011ef1553fa85").unwrap(),
        ],
        vec![
            from_hex("0xfcdfe95da833e9a9").unwrap(),
            from_hex("0x0f1d65d86b1afb27").unwrap(),
        ],
    ];
    pub static ref RC_MEDIUM: Vec<Vec<Scalar>> = vec![
        vec![
            from_hex("0x8de01824b6d06217").unwrap(),
            from_hex("0x90cabd996fd374eb").unwrap(),
        ],
        vec![
            from_hex("0x5c6c8dbae2122d86").unwrap(),
            from_hex("0x7c4f763ba72369d4").unwrap(),
        ],
        vec![
            from_hex("0xf70bb7f0cfb3864d").unwrap(),
            from_hex("0x8776568b676ee1c7").unwrap(),
        ],
        vec![
            from_hex("0x94929c65acb952a2").unwrap(),
            from_hex("0x4cc081ca560891bc").unwrap(),
        ],
        vec![
            from_hex("0xd3f9f290d2ebbce9").unwrap(),
            from_hex("0x9f81c420013ac696").unwrap(),
        ],
        vec![
            from_hex("0xb2b66e0e37701546").unwrap(),
            from_hex("0x3cfac108e729363a").unwrap(),
        ],
        vec![
            from_hex("0xee73bfe53838a698").unwrap(),
            from_hex("0xcffb8357c410a71e").unwrap(),
        ],
        vec![
            from_hex("0x4b8513bd72ed6aba").unwrap(),
            from_hex("0x8d6cae9832b09dd9").unwrap(),
        ],
        vec![
            from_hex("0x9aeb974ce077669b").unwrap(),
            from_hex("0xce9a5b0570dd73a6").unwrap(),
        ],
        vec![
            from_hex("0x553bf0c5fb46d348").unwrap(),
            from_hex("0xf72eab0f508458b6").unwrap(),
        ],
        vec![
            from_hex("0xb87b3dff9b12ff29").unwrap(),
            from_hex("0x2b8b2c740a0e3c94").unwrap(),
        ],
        vec![
            from_hex("0xe12d1ee11a03319e").unwrap(),
            from_hex("0x2e52e988a7c401bc").unwrap(),
        ],
        vec![
            from_hex("0xfe1bdcc23589b785").unwrap(),
            from_hex("0x31c9ca0abc28185f").unwrap(),
        ],
        vec![
            from_hex("0xcfa61e6f9e7d09f6").unwrap(),
            from_hex("0x3e91e51c51c80e6b").unwrap(),
        ],
    ];
    pub static ref RC_HARD1: Vec<Vec<Scalar>> = vec![
        vec![
            from_hex("0x816ea96e4bd1137a").unwrap(),
            from_hex("0x4906b37b9a7f6b03").unwrap(),
            from_hex("0xdef4b797d4c47fa8").unwrap(),
        ],
        vec![
            from_hex("0x81f1cfbbae679968").unwrap(),
            from_hex("0x2e4597e9b486c294").unwrap(),
            from_hex("0x3d02b3cbc042dfdf").unwrap(),
        ],
        vec![
            from_hex("0x03dd9933c03f7748").unwrap(),
            from_hex("0x1adf7d1a22993c72").unwrap(),
            from_hex("0xa2322b1ac39179a8").unwrap(),
        ],
        vec![
            from_hex("0xc75b45d2bde8212a").unwrap(),
            from_hex("0xf7877e62acfd65cd").unwrap(),
            from_hex("0x109d2660c4618920").unwrap(),
        ],
        vec![
            from_hex("0x1ecdbc609328a776").unwrap(),
            from_hex("0x98ccb8cb7afdc3f0").unwrap(),
            from_hex("0xf458d8364b4b76fb").unwrap(),
        ],
        vec![
            from_hex("0x119714be077a0515").unwrap(),
            from_hex("0x2a1ec04d801ae600").unwrap(),
            from_hex("0xa080817b1e4b5273").unwrap(),
        ],
        vec![
            from_hex("0xec2242ec8e76eb4e").unwrap(),
            from_hex("0x3bc1370d5b5e4eb6").unwrap(),
            from_hex("0x42a8c84e98cb5b29").unwrap(),
        ],
        vec![
            from_hex("0x3a4cbee5ee726bd5").unwrap(),
            from_hex("0x2f90602af243a30d").unwrap(),
            from_hex("0x38197cf23ae3384e").unwrap(),
        ],
        vec![
            from_hex("0xcbf987193d838b04").unwrap(),
            from_hex("0x1c9b35dfd5368398").unwrap(),
            from_hex("0x545c215df528a1aa").unwrap(),
        ],
        vec![
            from_hex("0xc0a53bdfe1c1e2a3").unwrap(),
            from_hex("0xb49f9fe57cde7615").unwrap(),
            from_hex("0xe85930b444945988").unwrap(),
        ],
    ];
    pub static ref RC_HARD2: Vec<Vec<Scalar>> = vec![
        vec![
            from_hex("0x6ff649261bd5b8ec").unwrap(),
            from_hex("0x2c25306a69d5b7e6").unwrap(),
        ],
        vec![
            from_hex("0xbab73ff86688e64b").unwrap(),
            from_hex("0x6e95acb9a21c4859").unwrap(),
        ],
        vec![
            from_hex("0xbdea759ce6d13d45").unwrap(),
            from_hex("0x7e3c89240f573285").unwrap(),
        ],
        vec![
            from_hex("0x464854e5e380a64a").unwrap(),
            from_hex("0xce7275148f077a00").unwrap(),
        ],
        vec![
            from_hex("0xf6e1c7aaad675b88").unwrap(),
            from_hex("0xf01d82f6366b3dc8").unwrap(),
        ],
        vec![
            from_hex("0xd5728f0d06e39c31").unwrap(),
            from_hex("0x81d6f3c14dd30c20").unwrap(),
        ],
        vec![
            from_hex("0xe1be979812269535").unwrap(),
            from_hex("0x480b7484ef86538a").unwrap(),
        ],
        vec![
            from_hex("0xf7041d992b4a8568").unwrap(),
            from_hex("0x16ea6478167d033f").unwrap(),
        ],
        vec![
            from_hex("0x12b2a1139f27262a").unwrap(),
            from_hex("0xa133749e9d576b6d").unwrap(),
        ],
        vec![
            from_hex("0xda640d85ab489437").unwrap(),
            from_hex("0x42a33ece4d632e33").unwrap(),
        ],
        vec![
            from_hex("0x9693f52b9a4b37e0").unwrap(),
            from_hex("0x264b8974a16909f4").unwrap(),
        ],
        vec![
            from_hex("0x64d3080d3dac731a").unwrap(),
            from_hex("0x15baf4df7cc2727a").unwrap(),
        ],
        vec![
            from_hex("0x43fe37af530b1e6c").unwrap(),
            from_hex("0x53fcc057c79bd15f").unwrap(),
        ],
        vec![
            from_hex("0xcd1e6d3a0ae387cb").unwrap(),
            from_hex("0x464aa9a35c714dbf").unwrap(),
        ],
        vec![
            from_hex("0xf346be6880e2fcf6").unwrap(),
            from_hex("0x6a6c31e485bab430").unwrap(),
        ],
        vec![
            from_hex("0x784d70023de8aedb").unwrap(),
            from_hex("0x4dca976d8a5f41af").unwrap(),
        ],
    ];
    pub static ref RESCUE_PRIME_PARAMS_EASY1: Arc<RescuePrimeParams<Scalar>> =
        Arc::new(RescuePrimeParams::new(3, 3, 4, &MDS3, &RC_EASY1));
    pub static ref RESCUE_PRIME_PARAMS_EASY2: Arc<RescuePrimeParams<Scalar>> =
        Arc::new(RescuePrimeParams::new(2, 3, 6, &MDS2, &RC_EASY2));
    pub static ref RESCUE_PRIME_PARAMS_MEDIUM: Arc<RescuePrimeParams<Scalar>> =
        Arc::new(RescuePrimeParams::new(2, 3, 7, &MDS2, &RC_MEDIUM));
    pub static ref RESCUE_PRIME_PARAMS_HARD1: Arc<RescuePrimeParams<Scalar>> =
        Arc::new(RescuePrimeParams::new(3, 3, 5, &MDS3, &RC_HARD1));
    pub static ref RESCUE_PRIME_PARAMS_HARD2: Arc<RescuePrimeParams<Scalar>> =
        Arc::new(RescuePrimeParams::new(2, 3, 8, &MDS2, &RC_HARD2));
}
